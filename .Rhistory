# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(IDEATools2)
library(IDEATools)
?MakeGroupReport
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
system.file("report/presentation_groupe.Rmd", package = "IDEATools")
system.file("report/rapport_groupe_word.Rmd", package = "IDEATools")
system.file("report/rapport_groupe_open.Rmd", package = "IDEATools")
MakeGroupExcel()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
setwd(current_dir)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(IDEATools)
remove.packages("IDEATools2", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
?plot_idea
path <- system.file("idea_example.json", package = "IDEATools")
diag_idea(path,export_type = NULL, type = "single") -> IDEAdata
diag_idea(path,export_type = NULL, type = "single", quiet = TRUE) -> IDEAdata
IDEAdata$data$dataset
IDEAdata$data$nodes$Global
IDEAdata$data$nodes$Global %>% tidyr::gather(key = nom_indicateur, value = valeur, -id_exploit)
IDEAdata$data$nodes$Global %>% tidyr::gather(key = nom_indicateur, value = valeur)
reference_table
IDEATools:::reference_table
IDEAdata$data$nodes$Global %>% tidyr::gather(key = indic_name, value = valeur, -id_exploit) %>% inner_join(IDEATools:::reference_table, by = "indic_name") %>% filter(level == "propriete") %>% filter(valeur %in% c("défavorable","très défavorable")) %>%
pull(indic_name) %>% paste(collapse = " / ")
library(dplyr)
%>% tidyr::gather(key = indic_name, value = valeur, -id_exploit) %>% inner_join(IDEATools:::reference_table, by = "indic_name") %>% filter(level == "propriete") %>% filter(valeur %in% c("défavorable","très défavorable")) %>%
pull(indic_name) %>% paste(collapse = " / ")
IDEAdata$data$nodes$Global %>% tidyr::gather(key = indic_name, value = valeur, -id_exploit) %>% inner_join(IDEATools:::reference_table, by = "indic_name") %>% filter(level == "propriete") %>% filter(valeur %in% c("défavorable","très défavorable")) %>%
pull(indic_name) %>% paste(collapse = " / ")
IDEAdata$data$nodes$Global %>% tidyr::gather(key = indic_name, value = valeur) %>% inner_join(IDEATools:::reference_table, by = "indic_name") %>% filter(level == "propriete") %>% filter(valeur %in% c("défavorable","très défavorable")) %>%
pull(indic_name) %>% paste(collapse = " / ")
IDEAdata$data$nodes$Robustesse$Robustesse
IDEAdata$data$nodes$Robustesse$Robustesse -> val
val <- str_to_title(val)
stringr::str_to_title(val)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
IDEAdata$data$dataset %>% arrange(dimension_value) %>% slice(1) %>% inner_join(IDEATools:::reference_table, by = "dimension_code") %>% pull(dimension_code)
IDEAdata$data$dataset %>% arrange(dimension_value) %>% slice(1) %>% inner_join(IDEATools:::reference_table, by = "dimension_code") %>% pull(dimension)
IDEAdata$data$dataset %>% arrange(dimension_value) %>% slice(1) %>% inner_join(IDEATools:::reference_table, by = "dimension_code") %>% pull(dimension) %>% unique
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
diag_idea("../../Traitements IDEA/testtt/",export_type = NULL, type = "group", quiet = TRUE)
diag_idea("../../Traitements IDEA/testtt/",export_type = NULL, type = "group", quiet = TRUE) -> IDEAcollectivedata
IDEAcollectivedata$data$dataset
IDEAcollectivedata$data$dataset %>%
inner_join(IDEATools:::reference_table, by = "dimension_code")
IDEAcollectivedata$data$dataset %>%
inner_join(IDEATools:::reference_table, by = "dimension_code") %>% distinct(farm_id,dimension_dimension_value)
IDEAcollectivedata$data$dataset %>%
inner_join(IDEATools:::reference_table, by = "dimension_code") %>% distinct(farm_id,dimension,dimension_value)
IDEAcollectivedata()$data$nodes$Global %>%
gather(key = indic, value = resultat, -farm_id) %>%
mutate(indicateur = replace_indicateur(indicateur)) %>%
inner_join(IDEATools:::reference_table, by = c("indic" = "indic_code"))
IDEAcollectivedata$data$nodes$Global %>%
gather(key = indic, value = resultat, -farm_id) %>%
mutate(indicateur = replace_indicateur(indicateur)) %>%
inner_join(IDEATools:::reference_table, by = c("indic" = "indic_code"))
IDEAcollectivedata$data$nodes$Global %>%
gather(key = indic, value = resultat, -farm_id) %>%
mutate(indic = replace_indicateur(indic)) %>%
inner_join(IDEATools:::reference_table, by = c("indic" = "indic_code"))
IDEAcollectivedata$data$nodes$Global %>%
gather(key = indic, value = resultat, -farm_id) %>%
mutate(indicateur = replace_indicateur(indicateur)) %>%
inner_join(IDEATools:::reference_table, by = c("indic" = "indic_code")) %>%
mutate(resultat = factor(resultat, levels = c("très favorable", "favorable", "intermédiaire", "défavorable", "très défavorable", "NC"))) %>%
mutate(indic_name = ifelse(indic_name == "Capacité productive et reproductive de biens et de services", yes = "Capacité productive et \n reproductive de biens et de \n services", no = indic_name)) %>%
arrange(dimension_code, indic_number) %>%
mutate(indic = factor(indic, levels = unique(indic))) %>%
mutate(level = case_when(
level == "indicateur" ~ "Indicateur",
level == "propriete" ~ "Propriété"
)) %>%
filter(level == "Propriété") %>%
select(farm_id,indic_name,resultat) %>%
spread(key = indic_name, value = resultat)
IDEAcollectivedata$data$nodes$Global %>%
gather(key = indic, value = resultat, -farm_id) %>%
mutate(indic = replace_indicateur(indic)) %>%
inner_join(IDEATools:::reference_table, by = c("indic" = "indic_code")) %>%
mutate(resultat = factor(resultat, levels = c("très favorable", "favorable", "intermédiaire", "défavorable", "très défavorable", "NC"))) %>%
mutate(indic_name = ifelse(indic_name == "Capacité productive et reproductive de biens et de services", yes = "Capacité productive et \n reproductive de biens et de \n services", no = indic_name)) %>%
arrange(dimension_code, indic_number) %>%
mutate(indic = factor(indic, levels = unique(indic))) %>%
mutate(level = case_when(
level == "indicateur" ~ "Indicateur",
level == "propriete" ~ "Propriété"
)) %>%
filter(level == "Propriété") %>%
select(farm_id,indic_name,resultat) %>%
spread(key = indic_name, value = resultat)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
12*18.30
12*18.30 + 15.90*6
38.70*3
40*9.60
116.10 + 315
6*3
315+38.70
315+38.70-430
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
warnings()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
?zip
?diag_idea
diag_idea(
input = path,
output_directory = tempdir,
type = "single",
export_type = "report",
prefix = "Exploitation_A",
dpi = 300,
report_format = "xlsx",
quiet = FALSE
)
library(IDEATools)
path <- system.file("idea_example.json", package = "IDEATools")
diag_idea(
input = path,
output_directory = tempdir,
type = "single",
export_type = "report",
prefix = "Exploitation_A",
dpi = 300,
report_format = "xlsx",
quiet = FALSE
)
tempdir <- tempdir()
diag_idea(
input = path,
output_directory = tempdir,
type = "single",
export_type = "report",
prefix = "Exploitation_A",
dpi = 300,
report_format = "xlsx",
quiet = FALSE
)
install.packages("distill")
path <- "../../Traitements IDEA/testtt/"
path
# Defining a knitting dir in tempdir in case the user doesn't have all permissions in working directory
knitting_dir <- file.path(tempdir(), "IDEATools_reports")
if (!dir.exists(knitting_dir)) (dir.create(knitting_dir))
file.copy(system.file("report/", package = "IDEATools"), knitting_dir, recursive = TRUE)
diag_idea(path,output_directory = knitting_dir,
export_type = "report", type = "group", quiet = TRUE, report_format = "pdf")
library(IDEATools)
diag_idea(dirname(input$dir$datapath[[1]]),output_directory = knitting_dir,
export_type = "report", type = "group", quiet = TRUE, report_format = "pdf")
diag_idea(path,output_directory = knitting_dir,
export_type = "report", type = "group", quiet = TRUE, report_format = "pdf")
paste0("Groupe_",length(input$dir$datapath))
paste0("Groupe_",length(path))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
setwd("~/Documents/ETBX/CASDAR_ACTION/R-IDEA/ShinyIDEA")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
?progressSweetAlert
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
styler:::style_active_file()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
usethis::use_readme_rmd()
devtools::check()
usethis::use_package("fresh","ggiraph","jsonlite","openxlsx")
usethis::use_package("fresh")
usethis::use_package("ggiraph")
usethis::use_package("jsonlite")
usethis::use_package("openxlsx")
usethis::use_package("shinycssloaders")
usethis::use_package("shinydashboard")
devtools::check()
devtools::document()
install.packages("xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
